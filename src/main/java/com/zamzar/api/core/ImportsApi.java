/*
 * Zamzar API
 * Zamzar provides a simple API for fast, scalable, high-quality file conversion for 100s of formats.
 *
 * The version of the OpenAPI document: 0.0.7
 * Contact: api-sdks@zamzar.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.zamzar.api.core;

import com.zamzar.api.invoker.ApiCallback;
import com.zamzar.api.invoker.ApiClient;
import com.zamzar.api.invoker.ApiException;
import com.zamzar.api.invoker.ApiResponse;
import com.zamzar.api.invoker.Configuration;
import com.zamzar.api.invoker.Pair;
import com.zamzar.api.invoker.ProgressRequestBody;
import com.zamzar.api.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.zamzar.api.model.Imports;
import com.zamzar.api.model.ModelImport;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ImportsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ImportsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ImportsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getImportById
     * @param importId Numeric id of the import to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information about a specific import </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImportByIdCall(Integer importId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/imports/{importId}"
            .replace("{" + "importId" + "}", localVarApiClient.escapeString(importId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImportByIdValidateBeforeCall(Integer importId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'importId' is set
        if (importId == null) {
            throw new ApiException("Missing the required parameter 'importId' when calling getImportById(Async)");
        }

        return getImportByIdCall(importId, _callback);

    }

    /**
     * Retrieve a specific import
     * Retriefe a specific import
     * @param importId Numeric id of the import to get (required)
     * @return ModelImport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information about a specific import </td><td>  -  </td></tr>
     </table>
     */
    public ModelImport getImportById(Integer importId) throws ApiException {
        ApiResponse<ModelImport> localVarResp = getImportByIdWithHttpInfo(importId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a specific import
     * Retriefe a specific import
     * @param importId Numeric id of the import to get (required)
     * @return ApiResponse&lt;ModelImport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information about a specific import </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelImport> getImportByIdWithHttpInfo(Integer importId) throws ApiException {
        okhttp3.Call localVarCall = getImportByIdValidateBeforeCall(importId, null);
        Type localVarReturnType = new TypeToken<ModelImport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a specific import (asynchronously)
     * Retriefe a specific import
     * @param importId Numeric id of the import to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information about a specific import </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImportByIdAsync(Integer importId, final ApiCallback<ModelImport> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImportByIdValidateBeforeCall(importId, _callback);
        Type localVarReturnType = new TypeToken<ModelImport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listImports
     * @param limit Limit the number of results (max 50) (optional)
     * @param after Retrieve imports after the specified importId (optional)
     * @param before Retrieve imports before the specified importId (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all imports </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listImportsCall(Integer limit, Integer after, Integer before, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/imports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listImportsValidateBeforeCall(Integer limit, Integer after, Integer before, final ApiCallback _callback) throws ApiException {
        return listImportsCall(limit, after, before, _callback);

    }

    /**
     * Retrieve a list of all imports
     * Retrieve a list of all imports
     * @param limit Limit the number of results (max 50) (optional)
     * @param after Retrieve imports after the specified importId (optional)
     * @param before Retrieve imports before the specified importId (optional)
     * @return Imports
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all imports </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout </td><td>  -  </td></tr>
     </table>
     */
    public Imports listImports(Integer limit, Integer after, Integer before) throws ApiException {
        ApiResponse<Imports> localVarResp = listImportsWithHttpInfo(limit, after, before);
        return localVarResp.getData();
    }

    /**
     * Retrieve a list of all imports
     * Retrieve a list of all imports
     * @param limit Limit the number of results (max 50) (optional)
     * @param after Retrieve imports after the specified importId (optional)
     * @param before Retrieve imports before the specified importId (optional)
     * @return ApiResponse&lt;Imports&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all imports </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Imports> listImportsWithHttpInfo(Integer limit, Integer after, Integer before) throws ApiException {
        okhttp3.Call localVarCall = listImportsValidateBeforeCall(limit, after, before, null);
        Type localVarReturnType = new TypeToken<Imports>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a list of all imports (asynchronously)
     * Retrieve a list of all imports
     * @param limit Limit the number of results (max 50) (optional)
     * @param after Retrieve imports after the specified importId (optional)
     * @param before Retrieve imports before the specified importId (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all imports </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listImportsAsync(Integer limit, Integer after, Integer before, final ApiCallback<Imports> _callback) throws ApiException {

        okhttp3.Call localVarCall = listImportsValidateBeforeCall(limit, after, before, _callback);
        Type localVarReturnType = new TypeToken<Imports>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startImport
     * @param url Provide a url in the form HTTP(S), (S)FTP or S3 (required)
     * @param filename Override the filename provided in the url (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Import submitted successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startImportCall(String url, String filename, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/imports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (url != null) {
            localVarFormParams.put("url", url);
        }

        if (filename != null) {
            localVarFormParams.put("filename", filename);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startImportValidateBeforeCall(String url, String filename, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling startImport(Async)");
        }

        return startImportCall(url, filename, _callback);

    }

    /**
     * Start an Import
     * Start an Import
     * @param url Provide a url in the form HTTP(S), (S)FTP or S3 (required)
     * @param filename Override the filename provided in the url (optional)
     * @return ModelImport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Import submitted successfully </td><td>  -  </td></tr>
     </table>
     */
    public ModelImport startImport(String url, String filename) throws ApiException {
        ApiResponse<ModelImport> localVarResp = startImportWithHttpInfo(url, filename);
        return localVarResp.getData();
    }

    /**
     * Start an Import
     * Start an Import
     * @param url Provide a url in the form HTTP(S), (S)FTP or S3 (required)
     * @param filename Override the filename provided in the url (optional)
     * @return ApiResponse&lt;ModelImport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Import submitted successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelImport> startImportWithHttpInfo(String url, String filename) throws ApiException {
        okhttp3.Call localVarCall = startImportValidateBeforeCall(url, filename, null);
        Type localVarReturnType = new TypeToken<ModelImport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start an Import (asynchronously)
     * Start an Import
     * @param url Provide a url in the form HTTP(S), (S)FTP or S3 (required)
     * @param filename Override the filename provided in the url (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Import submitted successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startImportAsync(String url, String filename, final ApiCallback<ModelImport> _callback) throws ApiException {

        okhttp3.Call localVarCall = startImportValidateBeforeCall(url, filename, _callback);
        Type localVarReturnType = new TypeToken<ModelImport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
