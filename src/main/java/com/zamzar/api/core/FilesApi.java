/*
 * Zamzar API
 * Zamzar provides a simple API for fast, scalable, high-quality file conversion for 100s of formats.
 *
 * The version of the OpenAPI document: 0.0.6
 * Contact: api-sdks@zamzar.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.zamzar.api.core;

import com.zamzar.api.invoker.ApiCallback;
import com.zamzar.api.invoker.ApiClient;
import com.zamzar.api.invoker.ApiException;
import com.zamzar.api.invoker.ApiResponse;
import com.zamzar.api.invoker.Configuration;
import com.zamzar.api.invoker.Pair;
import com.zamzar.api.invoker.ProgressRequestBody;
import com.zamzar.api.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.zamzar.api.model.Errors;
import java.io.File;
import com.zamzar.api.model.Files;
import com.zamzar.api.model.ModelFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FilesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FilesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FilesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteFileById
     * @param fileId Numeric id of the file to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File deleted successfully. The response will contain the metadata for the deleted file (but not the content). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFileByIdCall(Integer fileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/{fileId}"
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFileByIdValidateBeforeCall(Integer fileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteFileById(Async)");
        }

        return deleteFileByIdCall(fileId, _callback);

    }

    /**
     * Delete a file
     * Delete our copy of a file which has been uploaded, imported or converted.
     * @param fileId Numeric id of the file to delete (required)
     * @return ModelFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File deleted successfully. The response will contain the metadata for the deleted file (but not the content). </td><td>  -  </td></tr>
     </table>
     */
    public ModelFile deleteFileById(Integer fileId) throws ApiException {
        ApiResponse<ModelFile> localVarResp = deleteFileByIdWithHttpInfo(fileId);
        return localVarResp.getData();
    }

    /**
     * Delete a file
     * Delete our copy of a file which has been uploaded, imported or converted.
     * @param fileId Numeric id of the file to delete (required)
     * @return ApiResponse&lt;ModelFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File deleted successfully. The response will contain the metadata for the deleted file (but not the content). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelFile> deleteFileByIdWithHttpInfo(Integer fileId) throws ApiException {
        okhttp3.Call localVarCall = deleteFileByIdValidateBeforeCall(fileId, null);
        Type localVarReturnType = new TypeToken<ModelFile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a file (asynchronously)
     * Delete our copy of a file which has been uploaded, imported or converted.
     * @param fileId Numeric id of the file to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File deleted successfully. The response will contain the metadata for the deleted file (but not the content). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFileByIdAsync(Integer fileId, final ApiCallback<ModelFile> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFileByIdValidateBeforeCall(fileId, _callback);
        Type localVarReturnType = new TypeToken<ModelFile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFileById
     * @param fileId Numeric id of the file to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Metadata for a specific file </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource is not available because it has been deleted </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Resource has expired </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFileByIdCall(Integer fileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/{fileId}"
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFileByIdValidateBeforeCall(Integer fileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling getFileById(Async)");
        }

        return getFileByIdCall(fileId, _callback);

    }

    /**
     * Retrieve metadata for a specific file
     * Retrieve the metadata for a file which has been uploaded, imported or converted.
     * @param fileId Numeric id of the file to get (required)
     * @return ModelFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Metadata for a specific file </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource is not available because it has been deleted </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Resource has expired </td><td>  -  </td></tr>
     </table>
     */
    public ModelFile getFileById(Integer fileId) throws ApiException {
        ApiResponse<ModelFile> localVarResp = getFileByIdWithHttpInfo(fileId);
        return localVarResp.getData();
    }

    /**
     * Retrieve metadata for a specific file
     * Retrieve the metadata for a file which has been uploaded, imported or converted.
     * @param fileId Numeric id of the file to get (required)
     * @return ApiResponse&lt;ModelFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Metadata for a specific file </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource is not available because it has been deleted </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Resource has expired </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelFile> getFileByIdWithHttpInfo(Integer fileId) throws ApiException {
        okhttp3.Call localVarCall = getFileByIdValidateBeforeCall(fileId, null);
        Type localVarReturnType = new TypeToken<ModelFile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve metadata for a specific file (asynchronously)
     * Retrieve the metadata for a file which has been uploaded, imported or converted.
     * @param fileId Numeric id of the file to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Metadata for a specific file </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource is not available because it has been deleted </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Resource has expired </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFileByIdAsync(Integer fileId, final ApiCallback<ModelFile> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFileByIdValidateBeforeCall(fileId, _callback);
        Type localVarReturnType = new TypeToken<ModelFile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFileContentById
     * @param fileId Numeric id of the file to get the content for (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Content-Disposition -  <br>  </td></tr>
        <tr><td> 201 </td><td> The body of the response will contain the contents of a file in which case you can download the file data directly:  &#x60;&#x60;&#x60; HTTP/1.1 200 OK Content-Length: 15311 Content-Disposition: attachment; filename&#x3D;\&quot;portrait.png\&quot; Zamzar-Test-Credits-Remaining: 97 Zamzar-Credits-Remaining: 343 Content-Type: image/png; charset&#x3D;binary  [Binary content of portrait.png] &#x60;&#x60;&#x60;  ### When using cURL  Save the content of a file to disk using curl options &#x60;-L&#x60; (follow redirects), &#x60;-O&#x60; (Write output to a local file) and &#x60;-J&#x60; (use the server-specified Content-Disposition filename). Or specify your own filename by redirecting the output of your HTTP call:  &#x60;&#x60;&#x60;shell curl --request GET \\   --url https://api.zamzar.com/v1/files/123456/content \\   --header &#39;Authorization: Basic xxxxxx&#39; \\   --header &#39;Content-Type: application/json&#39; -L \\  -L  -O \\  -J   &gt; converted.png &#x60;&#x60;&#x60; </td><td>  * header-0 -  <br>  </td></tr>
        <tr><td> 307 </td><td> Instruct your client code to follow the redirect link specified in the &#x60;Location&#x60; header of the response in order to download the file:  &#x60;&#x60;&#x60; HTTP/1.1 307 Temporary Redirect Content-Length: 0 Location: https://someotherlocation.com/file Zamzar-Test-Credits-Remaining: 97 Zamzar-Credits-Remaining: 343 Content-Type: application/json; charset&#x3D;utf-8 &#x60;&#x60;&#x60;  ### When using cUrl  Save the content of a file to disk using curl options &#x60;-L&#x60; (follow redirects), &#x60;-O&#x60; (Write output to a local file) and &#x60;-J&#x60; (use the server-specified Content-Disposition filename). Or specify your own filename by redirecting the output of your HTTP call:  &#x60;&#x60;&#x60;shell curl --request GET \\   --url https://api.zamzar.com/v1/files/123456/content \\   --header &#39;Authorization: Basic xxxxxx&#39; \\   --header &#39;Content-Type: application/json&#39; -L \\  -L  -O \\  -J   &gt; converted.png &#x60;&#x60;&#x60; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFileContentByIdCall(Integer fileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/{fileId}/content"
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFileContentByIdValidateBeforeCall(Integer fileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling getFileContentById(Async)");
        }

        return getFileContentByIdCall(fileId, _callback);

    }

    /**
     * Retrieve the content of a file
     * Retrieve the contents of a file which has been converted using the &#x60;/jobs&#x60; endpoint. The content of files which have been uploaded or converted can also be retrieved.
     * @param fileId Numeric id of the file to get the content for (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Content-Disposition -  <br>  </td></tr>
        <tr><td> 201 </td><td> The body of the response will contain the contents of a file in which case you can download the file data directly:  &#x60;&#x60;&#x60; HTTP/1.1 200 OK Content-Length: 15311 Content-Disposition: attachment; filename&#x3D;\&quot;portrait.png\&quot; Zamzar-Test-Credits-Remaining: 97 Zamzar-Credits-Remaining: 343 Content-Type: image/png; charset&#x3D;binary  [Binary content of portrait.png] &#x60;&#x60;&#x60;  ### When using cURL  Save the content of a file to disk using curl options &#x60;-L&#x60; (follow redirects), &#x60;-O&#x60; (Write output to a local file) and &#x60;-J&#x60; (use the server-specified Content-Disposition filename). Or specify your own filename by redirecting the output of your HTTP call:  &#x60;&#x60;&#x60;shell curl --request GET \\   --url https://api.zamzar.com/v1/files/123456/content \\   --header &#39;Authorization: Basic xxxxxx&#39; \\   --header &#39;Content-Type: application/json&#39; -L \\  -L  -O \\  -J   &gt; converted.png &#x60;&#x60;&#x60; </td><td>  * header-0 -  <br>  </td></tr>
        <tr><td> 307 </td><td> Instruct your client code to follow the redirect link specified in the &#x60;Location&#x60; header of the response in order to download the file:  &#x60;&#x60;&#x60; HTTP/1.1 307 Temporary Redirect Content-Length: 0 Location: https://someotherlocation.com/file Zamzar-Test-Credits-Remaining: 97 Zamzar-Credits-Remaining: 343 Content-Type: application/json; charset&#x3D;utf-8 &#x60;&#x60;&#x60;  ### When using cUrl  Save the content of a file to disk using curl options &#x60;-L&#x60; (follow redirects), &#x60;-O&#x60; (Write output to a local file) and &#x60;-J&#x60; (use the server-specified Content-Disposition filename). Or specify your own filename by redirecting the output of your HTTP call:  &#x60;&#x60;&#x60;shell curl --request GET \\   --url https://api.zamzar.com/v1/files/123456/content \\   --header &#39;Authorization: Basic xxxxxx&#39; \\   --header &#39;Content-Type: application/json&#39; -L \\  -L  -O \\  -J   &gt; converted.png &#x60;&#x60;&#x60; </td><td>  -  </td></tr>
     </table>
     */
    public File getFileContentById(Integer fileId) throws ApiException {
        ApiResponse<File> localVarResp = getFileContentByIdWithHttpInfo(fileId);
        return localVarResp.getData();
    }

    /**
     * Retrieve the content of a file
     * Retrieve the contents of a file which has been converted using the &#x60;/jobs&#x60; endpoint. The content of files which have been uploaded or converted can also be retrieved.
     * @param fileId Numeric id of the file to get the content for (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Content-Disposition -  <br>  </td></tr>
        <tr><td> 201 </td><td> The body of the response will contain the contents of a file in which case you can download the file data directly:  &#x60;&#x60;&#x60; HTTP/1.1 200 OK Content-Length: 15311 Content-Disposition: attachment; filename&#x3D;\&quot;portrait.png\&quot; Zamzar-Test-Credits-Remaining: 97 Zamzar-Credits-Remaining: 343 Content-Type: image/png; charset&#x3D;binary  [Binary content of portrait.png] &#x60;&#x60;&#x60;  ### When using cURL  Save the content of a file to disk using curl options &#x60;-L&#x60; (follow redirects), &#x60;-O&#x60; (Write output to a local file) and &#x60;-J&#x60; (use the server-specified Content-Disposition filename). Or specify your own filename by redirecting the output of your HTTP call:  &#x60;&#x60;&#x60;shell curl --request GET \\   --url https://api.zamzar.com/v1/files/123456/content \\   --header &#39;Authorization: Basic xxxxxx&#39; \\   --header &#39;Content-Type: application/json&#39; -L \\  -L  -O \\  -J   &gt; converted.png &#x60;&#x60;&#x60; </td><td>  * header-0 -  <br>  </td></tr>
        <tr><td> 307 </td><td> Instruct your client code to follow the redirect link specified in the &#x60;Location&#x60; header of the response in order to download the file:  &#x60;&#x60;&#x60; HTTP/1.1 307 Temporary Redirect Content-Length: 0 Location: https://someotherlocation.com/file Zamzar-Test-Credits-Remaining: 97 Zamzar-Credits-Remaining: 343 Content-Type: application/json; charset&#x3D;utf-8 &#x60;&#x60;&#x60;  ### When using cUrl  Save the content of a file to disk using curl options &#x60;-L&#x60; (follow redirects), &#x60;-O&#x60; (Write output to a local file) and &#x60;-J&#x60; (use the server-specified Content-Disposition filename). Or specify your own filename by redirecting the output of your HTTP call:  &#x60;&#x60;&#x60;shell curl --request GET \\   --url https://api.zamzar.com/v1/files/123456/content \\   --header &#39;Authorization: Basic xxxxxx&#39; \\   --header &#39;Content-Type: application/json&#39; -L \\  -L  -O \\  -J   &gt; converted.png &#x60;&#x60;&#x60; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getFileContentByIdWithHttpInfo(Integer fileId) throws ApiException {
        okhttp3.Call localVarCall = getFileContentByIdValidateBeforeCall(fileId, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the content of a file (asynchronously)
     * Retrieve the contents of a file which has been converted using the &#x60;/jobs&#x60; endpoint. The content of files which have been uploaded or converted can also be retrieved.
     * @param fileId Numeric id of the file to get the content for (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Content-Disposition -  <br>  </td></tr>
        <tr><td> 201 </td><td> The body of the response will contain the contents of a file in which case you can download the file data directly:  &#x60;&#x60;&#x60; HTTP/1.1 200 OK Content-Length: 15311 Content-Disposition: attachment; filename&#x3D;\&quot;portrait.png\&quot; Zamzar-Test-Credits-Remaining: 97 Zamzar-Credits-Remaining: 343 Content-Type: image/png; charset&#x3D;binary  [Binary content of portrait.png] &#x60;&#x60;&#x60;  ### When using cURL  Save the content of a file to disk using curl options &#x60;-L&#x60; (follow redirects), &#x60;-O&#x60; (Write output to a local file) and &#x60;-J&#x60; (use the server-specified Content-Disposition filename). Or specify your own filename by redirecting the output of your HTTP call:  &#x60;&#x60;&#x60;shell curl --request GET \\   --url https://api.zamzar.com/v1/files/123456/content \\   --header &#39;Authorization: Basic xxxxxx&#39; \\   --header &#39;Content-Type: application/json&#39; -L \\  -L  -O \\  -J   &gt; converted.png &#x60;&#x60;&#x60; </td><td>  * header-0 -  <br>  </td></tr>
        <tr><td> 307 </td><td> Instruct your client code to follow the redirect link specified in the &#x60;Location&#x60; header of the response in order to download the file:  &#x60;&#x60;&#x60; HTTP/1.1 307 Temporary Redirect Content-Length: 0 Location: https://someotherlocation.com/file Zamzar-Test-Credits-Remaining: 97 Zamzar-Credits-Remaining: 343 Content-Type: application/json; charset&#x3D;utf-8 &#x60;&#x60;&#x60;  ### When using cUrl  Save the content of a file to disk using curl options &#x60;-L&#x60; (follow redirects), &#x60;-O&#x60; (Write output to a local file) and &#x60;-J&#x60; (use the server-specified Content-Disposition filename). Or specify your own filename by redirecting the output of your HTTP call:  &#x60;&#x60;&#x60;shell curl --request GET \\   --url https://api.zamzar.com/v1/files/123456/content \\   --header &#39;Authorization: Basic xxxxxx&#39; \\   --header &#39;Content-Type: application/json&#39; -L \\  -L  -O \\  -J   &gt; converted.png &#x60;&#x60;&#x60; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFileContentByIdAsync(Integer fileId, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFileContentByIdValidateBeforeCall(fileId, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listFiles
     * @param limit Limit the number of results (max 50) (optional)
     * @param after Retrieve files after the specified fileId (optional)
     * @param before Retrieve files before the specified fileId (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of source and associated target (converted) files within the &#x60;data&#x60; array. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * Zamzar-Credits-Remaining -  <br>  * Zamzar-Test-Credits-Remaining -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call listFilesCall(Integer limit, Integer after, Integer before, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFilesValidateBeforeCall(Integer limit, Integer after, Integer before, final ApiCallback _callback) throws ApiException {
        return listFilesCall(limit, after, before, _callback);

    }

    /**
     * Retrieve a list of files
     * Retrieve a list of files which have been uploaded, imported or submitted for conversion. Files are ordered by the most recent first. Expired files are not included.
     * @param limit Limit the number of results (max 50) (optional)
     * @param after Retrieve files after the specified fileId (optional)
     * @param before Retrieve files before the specified fileId (optional)
     * @return Files
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of source and associated target (converted) files within the &#x60;data&#x60; array. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * Zamzar-Credits-Remaining -  <br>  * Zamzar-Test-Credits-Remaining -  <br>  </td></tr>
     </table>
     */
    public Files listFiles(Integer limit, Integer after, Integer before) throws ApiException {
        ApiResponse<Files> localVarResp = listFilesWithHttpInfo(limit, after, before);
        return localVarResp.getData();
    }

    /**
     * Retrieve a list of files
     * Retrieve a list of files which have been uploaded, imported or submitted for conversion. Files are ordered by the most recent first. Expired files are not included.
     * @param limit Limit the number of results (max 50) (optional)
     * @param after Retrieve files after the specified fileId (optional)
     * @param before Retrieve files before the specified fileId (optional)
     * @return ApiResponse&lt;Files&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of source and associated target (converted) files within the &#x60;data&#x60; array. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * Zamzar-Credits-Remaining -  <br>  * Zamzar-Test-Credits-Remaining -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Files> listFilesWithHttpInfo(Integer limit, Integer after, Integer before) throws ApiException {
        okhttp3.Call localVarCall = listFilesValidateBeforeCall(limit, after, before, null);
        Type localVarReturnType = new TypeToken<Files>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a list of files (asynchronously)
     * Retrieve a list of files which have been uploaded, imported or submitted for conversion. Files are ordered by the most recent first. Expired files are not included.
     * @param limit Limit the number of results (max 50) (optional)
     * @param after Retrieve files after the specified fileId (optional)
     * @param before Retrieve files before the specified fileId (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of source and associated target (converted) files within the &#x60;data&#x60; array. </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * Zamzar-Credits-Remaining -  <br>  * Zamzar-Test-Credits-Remaining -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call listFilesAsync(Integer limit, Integer after, Integer before, final ApiCallback<Files> _callback) throws ApiException {

        okhttp3.Call localVarCall = listFilesValidateBeforeCall(limit, after, before, _callback);
        Type localVarReturnType = new TypeToken<Files>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadFile
     * @param content Provide the file to be uploaded (optional)
     * @param name Specify the name of the file (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> File uploaded successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadFileCall(File content, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (content != null) {
            localVarFormParams.put("content", content);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadFileValidateBeforeCall(File content, String name, final ApiCallback _callback) throws ApiException {
        return uploadFileCall(content, name, _callback);

    }

    /**
     * Upload a file
     * Upload a local file which can be used as input to a conversion job. Ensure the file is a [format supported by the API](https://developers.zamzar.com/formats) and does not exceed the maximum size of [your plan](https://developers.zamzar.com/user).
     * @param content Provide the file to be uploaded (optional)
     * @param name Specify the name of the file (optional)
     * @return ModelFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> File uploaded successfully </td><td>  -  </td></tr>
     </table>
     */
    public ModelFile uploadFile(File content, String name) throws ApiException {
        ApiResponse<ModelFile> localVarResp = uploadFileWithHttpInfo(content, name);
        return localVarResp.getData();
    }

    /**
     * Upload a file
     * Upload a local file which can be used as input to a conversion job. Ensure the file is a [format supported by the API](https://developers.zamzar.com/formats) and does not exceed the maximum size of [your plan](https://developers.zamzar.com/user).
     * @param content Provide the file to be uploaded (optional)
     * @param name Specify the name of the file (optional)
     * @return ApiResponse&lt;ModelFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> File uploaded successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelFile> uploadFileWithHttpInfo(File content, String name) throws ApiException {
        okhttp3.Call localVarCall = uploadFileValidateBeforeCall(content, name, null);
        Type localVarReturnType = new TypeToken<ModelFile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload a file (asynchronously)
     * Upload a local file which can be used as input to a conversion job. Ensure the file is a [format supported by the API](https://developers.zamzar.com/formats) and does not exceed the maximum size of [your plan](https://developers.zamzar.com/user).
     * @param content Provide the file to be uploaded (optional)
     * @param name Specify the name of the file (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> File uploaded successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadFileAsync(File content, String name, final ApiCallback<ModelFile> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadFileValidateBeforeCall(content, name, _callback);
        Type localVarReturnType = new TypeToken<ModelFile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
